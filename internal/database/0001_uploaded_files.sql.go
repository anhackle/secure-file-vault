// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0001_uploaded_files.sql

package database

import (
	"context"
	"database/sql"
)

const createMetadata = `-- name: CreateMetadata :execresult
INSERT INTO ` + "`" + `uploaded_files` + "`" + ` (
    id,
    original_name,
    s3_key,
    mime_type,
    file_size,
    created_at,
    expired_at
)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateMetadataParams struct {
	ID           string
	OriginalName string
	S3Key        string
	MimeType     string
	FileSize     int64
	CreatedAt    sql.NullTime
	ExpiredAt    sql.NullTime
}

func (q *Queries) CreateMetadata(ctx context.Context, arg CreateMetadataParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMetadata,
		arg.ID,
		arg.OriginalName,
		arg.S3Key,
		arg.MimeType,
		arg.FileSize,
		arg.CreatedAt,
		arg.ExpiredAt,
	)
}

const deleteMetadata = `-- name: DeleteMetadata :execresult
UPDATE ` + "`" + `uploaded_files` + "`" + `
SET
    is_deleted = 1
WHERE id = ?
`

func (q *Queries) DeleteMetadata(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteMetadata, id)
}

const getExpiredMetadata = `-- name: GetExpiredMetadata :many
SELECT
    id,
    s3_key,
    expired_at
FROM ` + "`" + `uploaded_files` + "`" + `
WHERE is_deleted = 0 AND expired_at < NOW()
`

type GetExpiredMetadataRow struct {
	ID        string
	S3Key     string
	ExpiredAt sql.NullTime
}

func (q *Queries) GetExpiredMetadata(ctx context.Context) ([]GetExpiredMetadataRow, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExpiredMetadataRow
	for rows.Next() {
		var i GetExpiredMetadataRow
		if err := rows.Scan(&i.ID, &i.S3Key, &i.ExpiredAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
